// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var an_arc, arc_colour, body_width, bright, bulb, circle_info, colour, current_spot, data, degs, dim, hide, hide_info, program, raph, set_spot, show_info, size, spot_links, spots, start, _i, _len, _ref;
    $('.slider h2 a').click(function() {
      $('.slider li').removeClass('show');
      $(this).parents('li').addClass('show');
      return false;
    });
    spots = $('body').children('header, section');
    spot_links = $('nav a');
    spot_links.scrollTo();
    current_spot = $(spot_links[0]);
    body_width = set_spot = function(spot) {
      if (spot !== current_spot) {
        spot_links.removeClass('current');
        spot.addClass('current');
        return current_spot = spot;
      }
    };
    $(document).scroll(function(e) {
      var current_line, nav_link, spot, stick_height, view3, _i, _len, _results;
      view3 = $(window).innerHeight() / 3;
      current_line = $(document).scrollTop();
      stick_height = $('hgroup').height();
      if (current_line > stick_height) {
        $('nav').addClass('stick-top');
      } else {
        $('nav').removeClass('stick-top');
      }
      _results = [];
      for (_i = 0, _len = spots.length; _i < _len; _i++) {
        spot = spots[_i];
        if ((spot.offsetTop + $(spot).height() - view3) > current_line) {
          nav_link = $('nav a[href=#' + spot.id + ']');
          set_spot($(nav_link));
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    bright = function(what) {
      what.stop();
      return what.animate({
        opacity: 1
      }, 50, 'ease');
    };
    dim = function(what) {
      what.stop();
      return what.animate({
        opacity: 0.5
      }, 100, 'ease');
    };
    hide = function(what) {
      what.stop();
      return what.animate({
        opacity: 0
      }, 50, 'ease');
    };
    data = {
      total: 0
    };
    data.programs = $('#chart-fallback li').map(function() {
      var cost;
      cost = +$(this).find('.program-cost').text();
      data.total += cost;
      return {
        name: $(this).find('.program-name').text(),
        cost: cost,
        slug: $(this).attr('id'),
        colour: $(this).attr('data-colour')
      };
    });
    raph = Raphael('pie', '100%', '100%');
    raph.setViewBox(0, 0, 360, 360, true);
    bulb = raph.image('/static/img/bulb.svg', 180 - (106 / 2), 180 - (188 / 2), 106, 188);
    bulb.attr({
      opacity: 0.5
    });
    bulb.hover(function() {
      return bright(this);
    }, function() {
      return dim(this);
    });
    raph.ca.arc = function(x, y, r, start, size, thickness, colour, swidth, stroke) {
      var r_inner, r_outer, rad_end, rad_start, x1, x2, x3, x4, y1, y2, y3, y4;
      r_outer = r - swidth / 2;
      r_inner = r - thickness + swidth / 2;
      rad_start = (start + 32) * Math.PI / 180;
      rad_end = (start + 32 + size) * Math.PI / 180;
      x1 = x - r_outer * Math.cos(rad_start);
      y1 = y - r_outer * Math.sin(rad_start);
      x2 = x - r_outer * Math.cos(rad_end);
      y2 = y - r_outer * Math.sin(rad_end);
      x3 = x - r_inner * Math.cos(rad_end);
      y3 = y - r_inner * Math.sin(rad_end);
      x4 = x - r_inner * Math.cos(rad_start);
      y4 = y - r_inner * Math.sin(rad_start);
      return {
        fill: colour,
        'stroke-width': swidth,
        stroke: stroke,
        path: [["M", x1, y1], ["A", r_outer, r_outer, 0, +(size > 180), 1, x2, y2], ["L", x3, y3], ["A", r_inner, r_inner, 0, +(size > 180), 0, x4, y4], ["Z"]]
      };
    };
    start = 0;
    colour = 0;
    circle_info = {
      textattr: {
        'font-family': 'Anaheim',
        'font-size': 20,
        fill: '#fff'
      },
      show: function(data) {
        var title;
        this.hide();
        title = data.name;
        title = title.split('&').join("&\n").split('/').join("/\n");
        this.title = raph.text(180, 170, title).attr(this.textattr).attr({
          'font-weight': 'bold',
          opacity: 1
        });
        return this.cost = raph.text(180, 210, "$ ".concat(data.cost)).attr(this.textattr).attr({
          fill: '#fff'
        }, {
          opacity: 0.9,
          'font-size': 20
        });
      },
      hide: function() {
        this.title.attr({
          opacity: 0
        });
        return this.cost.attr({
          opacity: 0
        });
      }
    };
    show_info = function() {
      hide(bulb);
      bright(this);
      return circle_info.show(this.budget_data);
    };
    hide_info = function() {
      dim(bulb);
      dim(this);
      return circle_info.hide();
    };
    _ref = data.programs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      program = _ref[_i];
      degs = program.cost / data.total * 360;
      arc_colour = Raphael.hsb(colour / (data.programs.length + 1), 0.5, 0.9);
      an_arc = raph.path().attr({
        arc: [180, 180, 180, start, degs, 72, arc_colour, 2, '#000'],
        opacity: 0.5
      });
      an_arc.budget_data = program;
      an_arc.hover(show_info, hide_info).touchstart(show_info);
      start += degs;
      colour += 1;
    }
    size = $('#pie-container').width();
    return $('#pie').css({
      height: size,
      width: size
    });
  });

}).call(this);
